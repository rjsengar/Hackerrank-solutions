#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'formingMagicSquare' function below.
#
# The function is expected to return an INTEGER.
# The function accepts 2D_INTEGER_ARRAY s as parameter.
#

def formingMagicSquare(s):
    m1=[[2,7,6],[9,5,1],[4,3,8]]
    m2=[[2,9,4],[7,5,3],[6,1,8]]
    m3=[[4,3,8],[9,5,1],[2,7,6]]
    m4=[[4,9,2],[3,5,7],[8,1,6]]
    m5=[[6,7,2],[1,5,9],[8,3,4]]
    m6=[[8,1,6],[3,5,7],[4,9,2]]
    m7=[[8,3,4],[1,5,9],[6,7,2]]
    m8=[[6,1,8],[7,5,3],[2,9,4]]
    c1,c2,c3,c4,c5,c6,c7,c8=0,0,0,0,0,0,0,0
    for i in range(3):
        for j in range(3):
            c1+=abs(s[i][j]-m1[i][j])
        
    for i in range(3):
        for j in range(3):
            c2+=abs(s[i][j]-m2[i][j])
        
    for i in range(3):
        for j in range(3):
            c3+=abs(s[i][j]-m3[i][j])
        
    for i in range(3):
        for j in range(3):
            c4+=abs(s[i][j]-m4[i][j])
        
    for i in range(3):
        for j in range(3):
            c5+=abs(s[i][j]-m5[i][j])
        
    for i in range(3):
        for j in range(3):
            c6+=abs(s[i][j]-m6[i][j])
        
    for i in range(3):
        for j in range(3):
            c7+=abs(s[i][j]-m7[i][j])
        
    for i in range(3):
        for j in range(3):
            c8+=abs(s[i][j]-m8[i][j])
        c=min(c1,c2,c3,c4,c5,c6,c7,c8)
    return c

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = []

    for _ in range(3):
        s.append(list(map(int, input().rstrip().split())))

    result = formingMagicSquare(s)

    fptr.write(str(result) + '\n')

    fptr.close()
